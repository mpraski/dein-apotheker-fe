@import "responsive.scss";

@mixin bubble(
    $normalBorder: $buttonBorderColor,
    $normalBackground: $buttonBackgroundColor,
    $border: $buttonBorderColor,
    $background: $buttonBackgroundColor
) {
    border-radius: $borderRadius;
    border-style: $borderStyle;
    border-width: $borderWidth;

    color: $buttonTextColor;
    background-color: $background;
    border-color: $border;

    @include respond-to(small) {
        max-width: $bubbleMaxWidth;
    }    

    &.right {
        background-color: $normalBackground;
        border-color: $normalBorder;
    }

    text-align: left;
    user-select: none;

    .icon > .material-design-icon__svg {
        bottom: 0;
    }
}

@mixin padded($small: $paddingButtonSmall, $large: $paddingButton) {
    padding: $small;

    @include respond-to(small) {
        padding: $large;
    }
}

@mixin horizontal-list($justify: flex-end, $wrap: wrap) {
    display: flex;
    flex-direction: row;
    justify-content: $justify;
    flex-wrap: $wrap;
}

@mixin vertical-list($align: inherit, $wrap: nowrap) {
    display: flex;
    flex-direction: column;
    align-items: $align;
    flex-wrap: $wrap;
}

@mixin actionable($color: $buttonBorderColor, $disabled: $buttonBorderColor) {
    cursor: pointer;

    transition: all $animationDuration;

    &:hover {
        background-color: $color;

        &:after {
            border-top: 10px solid $color;
        }
    }

    &:active {
        border-color: darken($color, 10%);
        background-color: darken($color, 10%);
    }

    &.disabled {
        background-color: $disabled;
        color: $textColorSecondary;
        cursor: not-allowed;

        &:hover {
            background-color: $disabled;
        }

        &:active {
            border-color: $disabled;
            background-color: $disabled;
        }
    }
}

@mixin selectable {
    &.selected {
        background-color: $accentColor;
        border-color: $accentColor;
    }

    &:hover {
        &.selected {
            background-color: lighten($accentColor, 5%);
            border-color: lighten($accentColor, 5%);
        }
    }

    &:active {
        &.selected {
            background-color: lighten($accentColor, 10%);
            border-color: lighten($accentColor, 10%);
        }
    }
}

@mixin centered {
    margin-left: auto;
    margin-right: auto;
}

@mixin authorable(
    $normalBorder: $buttonBorderColor,
    $normalBackground: $buttonBorderColor,
    $border: $buttonBorderColor,
    $background: $buttonBackgroundColor
) {
    position: relative;

    &:before {
        content: "";
        width: 0px;
        height: 0px;
        position: absolute;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 10px solid $border;
        border-bottom: 10px solid transparent;
        bottom: -21px;
    }

    &:after {
        transition: $animationDuration;
        content: "";
        width: 0px;
        height: 0px;
        position: absolute;
        border-left: 10px solid transparent;
        border-right: 10px solid transparent;
        border-top: 10px solid $background;
        border-bottom: 10px solid transparent;
        bottom: -21px;
    }

    &.right {
        align-self: flex-end;

        &:before {
            right: 1em;
            border-top-color: $normalBorder;
        }

        &:after {
            right: 1em;
            border-top-color: $normalBackground;
        }
    }

    &.left {
        align-self: flex-start;
        
        &:before {
            left: 1em;
        }

        &:after {
            left: 1em;
        }
    }
}

@mixin big-icon($color: $textColorInfo) {
    cursor: pointer;
    height: 1.5rem;
    width: 1.5rem;
    color: $color;

    & > .material-design-icon__svg {
        height: 1.5rem;
        width: 1.5rem;
        bottom: 0;
    }
}
